/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.api.openapitrnyml;

import com.example.model.openapitrnyml.BasicErrorResponse;
import com.example.model.openapitrnyml.HealthCheckResponse;
import com.example.model.openapitrnyml.TrnValidateBatchDeleteResponse;
import com.example.model.openapitrnyml.TrnValidateBatchRequest;
import com.example.model.openapitrnyml.TrnValidateBatchResponse;
import com.example.model.openapitrnyml.TrnValidateErrorResponse;
import com.example.model.openapitrnyml.TrnValidateRequest;
import com.example.model.openapitrnyml.TrnValidateResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-01T11:22:40.630770+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "TrnValidate", description = "Endpoints to validate the tax registration number(s).")
public interface TrnApi {

    /**
     * DELETE /trn/validate/batch/{batchId} : Delete the request of batch of tax registration numbers validation
     * This endpoint takes the batch id and delete the running batch of tax registration numbers validation request at server side.
     *
     * @param batchId The unique batch request identifier. (required)
     * @return Successfully deleted the request of batch of tax registration numbers validation. (status code 200)
     *         or Unauthenticated request. (status code 401)
     *         or Unauthorized request. (status code 403)
     *         or Not found. (status code 404)
     *         or Too many requests. (status code 429)
     *         or Unexpected error while processing request. (status code 500)
     *         or Service is unhealthy. (status code 503)
     */
    @Operation(
        operationId = "deleteTrnValidateBatch",
        summary = "Delete the request of batch of tax registration numbers validation",
        description = "This endpoint takes the batch id and delete the running batch of tax registration numbers validation request at server side.",
        tags = { "TrnValidate" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully deleted the request of batch of tax registration numbers validation.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TrnValidateBatchDeleteResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthenticated request."),
            @ApiResponse(responseCode = "403", description = "Unauthorized request."),
            @ApiResponse(responseCode = "404", description = "Not found."),
            @ApiResponse(responseCode = "429", description = "Too many requests."),
            @ApiResponse(responseCode = "500", description = "Unexpected error while processing request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service is unhealthy.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthCheckResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKey"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/trn/validate/batch/{batchId}",
        produces = { "application/json" }
    )
    ResponseEntity<TrnValidateBatchDeleteResponse> deleteTrnValidateBatch(
        @Parameter(name = "batchId", description = "The unique batch request identifier.", required = true, in = ParameterIn.PATH) @PathVariable("batchId") String batchId
    );


    /**
     * GET /trn/validate/{requestId} : Get the response of tax registration number validate request
     * This endpoint takes the request id and returns the response of the tax registration number
     *
     * @param requestId The unique request identifier. (required)
     * @return Response of tax registration number validation. (status code 200)
     *         or Unauthenticated request. (status code 401)
     *         or Unauthorized request. (status code 403)
     *         or Not found. (status code 404)
     *         or Too many requests. (status code 429)
     *         or Unexpected error while processing request. (status code 500)
     *         or Service is unhealthy. (status code 503)
     */
    @Operation(
        operationId = "fetchTrnValidate",
        summary = "Get the response of tax registration number validate request",
        description = "This endpoint takes the request id and returns the response of the tax registration number",
        tags = { "TrnValidate" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Response of tax registration number validation.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TrnValidateResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthenticated request."),
            @ApiResponse(responseCode = "403", description = "Unauthorized request."),
            @ApiResponse(responseCode = "404", description = "Not found."),
            @ApiResponse(responseCode = "429", description = "Too many requests."),
            @ApiResponse(responseCode = "500", description = "Unexpected error while processing request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service is unhealthy.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthCheckResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKey"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/trn/validate/{requestId}",
        produces = { "application/json" }
    )
    ResponseEntity<TrnValidateResponse> fetchTrnValidate(
        @Parameter(name = "requestId", description = "The unique request identifier.", required = true, in = ParameterIn.PATH) @PathVariable("requestId") String requestId
    );


    /**
     * GET /trn/validate/batch/{batchId} : Get the response of batch of tax registration numbers
     * This endpoint takes the batch id and returns the response of batch of tax registration numbers.
     *
     * @param batchId The unique batch request identifier. (required)
     * @param offset The starting index of records to be returned. (required)
     * @param limit The limit number of records to be returned. (required)
     * @return Response of the batch of tax registration numbers validation. (status code 200)
     *         or Unauthenticated request. (status code 401)
     *         or Unauthorized request. (status code 403)
     *         or Not found. (status code 404)
     *         or Too many requests. (status code 429)
     *         or Unexpected error while processing request. (status code 500)
     *         or Service is unhealthy. (status code 503)
     */
    @Operation(
        operationId = "fetchTrnValidateBatch",
        summary = "Get the response of batch of tax registration numbers",
        description = "This endpoint takes the batch id and returns the response of batch of tax registration numbers.",
        tags = { "TrnValidate" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Response of the batch of tax registration numbers validation.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TrnValidateBatchResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthenticated request."),
            @ApiResponse(responseCode = "403", description = "Unauthorized request."),
            @ApiResponse(responseCode = "404", description = "Not found."),
            @ApiResponse(responseCode = "429", description = "Too many requests."),
            @ApiResponse(responseCode = "500", description = "Unexpected error while processing request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service is unhealthy.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthCheckResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKey"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/trn/validate/batch/{batchId}",
        produces = { "application/json" }
    )
    ResponseEntity<TrnValidateBatchResponse> fetchTrnValidateBatch(
        @Parameter(name = "batchId", description = "The unique batch request identifier.", required = true, in = ParameterIn.PATH) @PathVariable("batchId") String batchId,
        @NotNull @Parameter(name = "offset", description = "The starting index of records to be returned.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = true, defaultValue = "0") Integer offset,
        @NotNull @Parameter(name = "limit", description = "The limit number of records to be returned.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = true, defaultValue = "100") Integer limit
    );


    /**
     * POST /trn/validate : Validate the tax registration number
     * This endpoint takes the details of tax registration number and validate.
     *
     * @param trnValidateRequest  (optional)
     * @return Request to validate the tax registration number submitted successfully. (status code 200)
     *         or Bad request. (status code 400)
     *         or Unauthenticated request. (status code 401)
     *         or Unauthorized request. (status code 403)
     *         or Too many requests. (status code 429)
     *         or Unexpected error while processing request. (status code 500)
     *         or Service is unhealthy. (status code 503)
     */
    @Operation(
        operationId = "trnValidate",
        summary = "Validate the tax registration number",
        description = "This endpoint takes the details of tax registration number and validate.",
        tags = { "TrnValidate" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request to validate the tax registration number submitted successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TrnValidateResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TrnValidateErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthenticated request."),
            @ApiResponse(responseCode = "403", description = "Unauthorized request."),
            @ApiResponse(responseCode = "429", description = "Too many requests."),
            @ApiResponse(responseCode = "500", description = "Unexpected error while processing request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service is unhealthy.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthCheckResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKey"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/trn/validate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<TrnValidateResponse> trnValidate(
        @Parameter(name = "TrnValidateRequest", description = "") @Valid @RequestBody(required = false) TrnValidateRequest trnValidateRequest
    );


    /**
     * POST /trn/validate/batch : Validate the tax registration numbers in batch
     * This endpoint takes the batch of tax registration numbers and validate.
     *
     * @param trnValidateBatchRequest  (optional)
     * @return Request to validate the batch of tax registration numbers being processed. (status code 200)
     *         or Bad request. (status code 400)
     *         or Unauthenticated request. (status code 401)
     *         or Unauthorized request. (status code 403)
     *         or Too many requests. (status code 429)
     *         or Unexpected error while processing request. (status code 500)
     *         or Service is unhealthy. (status code 503)
     */
    @Operation(
        operationId = "trnValidateBatch",
        summary = "Validate the tax registration numbers in batch",
        description = "This endpoint takes the batch of tax registration numbers and validate.",
        tags = { "TrnValidate" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request to validate the batch of tax registration numbers being processed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TrnValidateBatchResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TrnValidateErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthenticated request."),
            @ApiResponse(responseCode = "403", description = "Unauthorized request."),
            @ApiResponse(responseCode = "429", description = "Too many requests."),
            @ApiResponse(responseCode = "500", description = "Unexpected error while processing request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service is unhealthy.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthCheckResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKey"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/trn/validate/batch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<TrnValidateBatchResponse> trnValidateBatch(
        @Parameter(name = "TrnValidateBatchRequest", description = "") @Valid @RequestBody(required = false) TrnValidateBatchRequest trnValidateBatchRequest
    );

}
