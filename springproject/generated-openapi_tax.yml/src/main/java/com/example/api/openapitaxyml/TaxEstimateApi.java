/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.api.openapitaxyml;

import com.example.model.openapitaxyml.BasicErrorResponse;
import com.example.model.openapitaxyml.HealthCheckResponse;
import com.example.model.openapitaxyml.TaxEstimationRequest;
import com.example.model.openapitaxyml.TaxEstimationResponse;
import com.example.model.openapitaxyml.ValidationErrorResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-01T11:22:39.362065+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "TaxEstimate", description = "Endpoints to estimate taxes.")
public interface TaxEstimateApi {

    /**
     * POST /tax-estimate : Estimate tax
     * This endpoint is used to estimate taxes for a set of line items being sold by the Merchant to a Customer.
     *
     * @param taxEstimationRequest  (optional)
     * @return Tax estimated successfully for given line items. (status code 200)
     *         or Bad request. (status code 400)
     *         or Unauthenticated request. (status code 401)
     *         or Unauthorized request. (status code 403)
     *         or Not found. (status code 404)
     *         or Too many requests. (status code 429)
     *         or Unexpected error while processing request. (status code 500)
     *         or Service is unhealthy. (status code 503)
     */
    @Operation(
        operationId = "estimateTaxes",
        summary = "Estimate tax",
        description = "This endpoint is used to estimate taxes for a set of line items being sold by the Merchant to a Customer.",
        tags = { "TaxEstimate" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tax estimated successfully for given line items.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaxEstimationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthenticated request."),
            @ApiResponse(responseCode = "403", description = "Unauthorized request."),
            @ApiResponse(responseCode = "404", description = "Not found."),
            @ApiResponse(responseCode = "429", description = "Too many requests."),
            @ApiResponse(responseCode = "500", description = "Unexpected error while processing request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service is unhealthy.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthCheckResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKey"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tax-estimate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<TaxEstimationResponse> estimateTaxes(
        @Parameter(name = "TaxEstimationRequest", description = "") @Valid @RequestBody(required = false) TaxEstimationRequest taxEstimationRequest
    );

}
