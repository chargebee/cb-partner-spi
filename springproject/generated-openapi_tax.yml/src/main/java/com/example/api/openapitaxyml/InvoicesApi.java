/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.api.openapitaxyml;

import com.example.model.openapitaxyml.BasicErrorResponse;
import com.example.model.openapitaxyml.HealthCheckResponse;
import com.example.model.openapitaxyml.Invoice;
import com.example.model.openapitaxyml.InvoiceRequest;
import com.example.model.openapitaxyml.ValidationErrorResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-01T11:22:39.362065+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "Invoice", description = "Endpoints to manage invoices sent to the Tax Service Provider.")
public interface InvoicesApi {

    /**
     * POST /invoices/{invoiceId}/commit : Commit Invoice
     * This endpoint is used to commit an invoice for a given invoice id. Once committed, the invoice is considered to be finalized.
     *
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (required)
     * @return Invoice committed successfully. (status code 204)
     *         or Unauthenticated request. (status code 401)
     *         or Unauthorized request. (status code 403)
     *         or Not found. (status code 404)
     *         or Too many requests. (status code 429)
     *         or Unexpected error while processing request. (status code 500)
     *         or Service is unhealthy. (status code 503)
     */
    @Operation(
        operationId = "commitInvoice",
        summary = "Commit Invoice",
        description = "This endpoint is used to commit an invoice for a given invoice id. Once committed, the invoice is considered to be finalized.",
        tags = { "Invoice" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Invoice committed successfully."),
            @ApiResponse(responseCode = "401", description = "Unauthenticated request."),
            @ApiResponse(responseCode = "403", description = "Unauthorized request."),
            @ApiResponse(responseCode = "404", description = "Not found."),
            @ApiResponse(responseCode = "429", description = "Too many requests."),
            @ApiResponse(responseCode = "500", description = "Unexpected error while processing request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service is unhealthy.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthCheckResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKey"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/invoices/{invoiceId}/commit",
        produces = { "application/json" }
    )
    ResponseEntity<Void> commitInvoice(
        @Parameter(name = "invoiceId", description = "The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider.", required = true, in = ParameterIn.PATH) @PathVariable("invoiceId") String invoiceId
    );


    /**
     * POST /invoices : Create Invoice
     * This endpoint is used to send an invoice to the Tax Service Provider. Invoices created in Chargebee are statements of amounts owed by the Customer to the Merchant for a specific purchase.
     *
     * @param invoiceRequest  (optional)
     * @return Invoice created successfully. (status code 201)
     *         or Bad request. (status code 400)
     *         or Unauthenticated request. (status code 401)
     *         or Unauthorized request. (status code 403)
     *         or Too many requests. (status code 429)
     *         or Unexpected error while processing request. (status code 500)
     *         or Service is unhealthy. (status code 503)
     */
    @Operation(
        operationId = "createInvoice",
        summary = "Create Invoice",
        description = "This endpoint is used to send an invoice to the Tax Service Provider. Invoices created in Chargebee are statements of amounts owed by the Customer to the Merchant for a specific purchase.",
        tags = { "Invoice" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Invoice created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Invoice.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthenticated request."),
            @ApiResponse(responseCode = "403", description = "Unauthorized request."),
            @ApiResponse(responseCode = "429", description = "Too many requests."),
            @ApiResponse(responseCode = "500", description = "Unexpected error while processing request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service is unhealthy.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthCheckResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKey"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/invoices",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Invoice> createInvoice(
        @Parameter(name = "InvoiceRequest", description = "") @Valid @RequestBody(required = false) InvoiceRequest invoiceRequest
    );


    /**
     * GET /invoices/{invoiceId} : Retrieve Invoice
     * This endpoint is used to retrieve an invoice for a given invoice id.
     *
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (required)
     * @return Invoice retrieved successfully. (status code 200)
     *         or Unauthenticated request. (status code 401)
     *         or Unauthorized request. (status code 403)
     *         or Not found. (status code 404)
     *         or Too many requests. (status code 429)
     *         or Unexpected error while processing request. (status code 500)
     *         or Service is unhealthy. (status code 503)
     */
    @Operation(
        operationId = "fetchInvoice",
        summary = "Retrieve Invoice",
        description = "This endpoint is used to retrieve an invoice for a given invoice id.",
        tags = { "Invoice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Invoice retrieved successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Invoice.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthenticated request."),
            @ApiResponse(responseCode = "403", description = "Unauthorized request."),
            @ApiResponse(responseCode = "404", description = "Not found."),
            @ApiResponse(responseCode = "429", description = "Too many requests."),
            @ApiResponse(responseCode = "500", description = "Unexpected error while processing request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service is unhealthy.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthCheckResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKey"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/invoices/{invoiceId}",
        produces = { "application/json" }
    )
    ResponseEntity<Invoice> fetchInvoice(
        @Parameter(name = "invoiceId", description = "The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider.", required = true, in = ParameterIn.PATH) @PathVariable("invoiceId") String invoiceId
    );


    /**
     * POST /invoices/{invoiceId}/void : Void Invoice
     * This endpoint is used to mark a specific invoice as void. Voiding cancels the invoice without deleting it.
     *
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (required)
     * @return Invoice voided successfully. (status code 204)
     *         or Unauthenticated request. (status code 401)
     *         or Unauthorized request. (status code 403)
     *         or Not found. (status code 404)
     *         or Too many requests. (status code 429)
     *         or Unexpected error while processing request. (status code 500)
     *         or Service is unhealthy. (status code 503)
     */
    @Operation(
        operationId = "voidInvoice",
        summary = "Void Invoice",
        description = "This endpoint is used to mark a specific invoice as void. Voiding cancels the invoice without deleting it.",
        tags = { "Invoice" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Invoice voided successfully."),
            @ApiResponse(responseCode = "401", description = "Unauthenticated request."),
            @ApiResponse(responseCode = "403", description = "Unauthorized request."),
            @ApiResponse(responseCode = "404", description = "Not found."),
            @ApiResponse(responseCode = "429", description = "Too many requests."),
            @ApiResponse(responseCode = "500", description = "Unexpected error while processing request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service is unhealthy.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthCheckResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKey"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/invoices/{invoiceId}/void",
        produces = { "application/json" }
    )
    ResponseEntity<Void> voidInvoice(
        @Parameter(name = "invoiceId", description = "The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider.", required = true, in = ParameterIn.PATH) @PathVariable("invoiceId") String invoiceId
    );

}
