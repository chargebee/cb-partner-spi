/*
 * Taxes Service Adapter SPI
 * ## Overview Tax Service Adapter is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Address validation - Estimating taxes for sales - Submitting invoices for tax filing  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Tax Authority The institution, usually a government, that is responsible for collecting taxes for commercial transactions between Merchants and their Customers.   ### Tax Service Provider The service which provides tax estimation and tax filing services for merchants. ### Tax Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Tax Service Provider's API. - Translates API responses from the Tax Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Tax Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ```     `\"Authorization\":\"{\"<authorization_key>\":\"test_GykCvTykZFTBqHQAFzjMN9R1Thgdho0Q\"}\"` 
 *
 * The version of the OpenAPI document: 0.3.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.chargebee.spi.tax.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.chargebee.spi.tax.model.FieldItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.chargebee.spi.tax.client.JSON;

/**
 * Represents the details of a line item in a tax estimation request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TaxEstimationLineItemRequest {
  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_ITEM_CODE = "itemCode";
  @SerializedName(SERIALIZED_NAME_ITEM_CODE)
  private String itemCode;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private Double unitPrice;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_DISCOUNT_AMOUNT = "discountAmount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_AMOUNT)
  private Double discountAmount;

  public static final String SERIALIZED_NAME_IS_TAX_INCLUSIVE = "isTaxInclusive";
  @SerializedName(SERIALIZED_NAME_IS_TAX_INCLUSIVE)
  private Boolean isTaxInclusive;

  public static final String SERIALIZED_NAME_TAX_IDENTIFIERS = "taxIdentifiers";
  @SerializedName(SERIALIZED_NAME_TAX_IDENTIFIERS)
  private List<FieldItem> taxIdentifiers;

  public TaxEstimationLineItemRequest() {
  }

  public TaxEstimationLineItemRequest number(Integer number) {
    
    this.number = number;
    return this;
  }

   /**
   * Index or serial number of the line item.
   * minimum: 1
   * @return number
  **/
  @javax.annotation.Nonnull
  public Integer getNumber() {
    return number;
  }


  public void setNumber(Integer number) {
    this.number = number;
  }


  public TaxEstimationLineItemRequest itemCode(String itemCode) {
    
    this.itemCode = itemCode;
    return this;
  }

   /**
   * The unique identifier (in Chargebee) of the product corresponding to the line item. If the line item corresponds to a one-off charge, then this identifier is not provided. If entity_type is &#x60;adhoc&#x60;, the &#x60;itemCode&#x60; parameter will be set to &#x60;adhoc_charge&#x60;.
   * @return itemCode
  **/
  @javax.annotation.Nullable
  public String getItemCode() {
    return itemCode;
  }


  public void setItemCode(String itemCode) {
    this.itemCode = itemCode;
  }


  public TaxEstimationLineItemRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the line item.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TaxEstimationLineItemRequest quantity(Double quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity associated with this line item.
   * minimum: 0
   * @return quantity
  **/
  @javax.annotation.Nullable
  public Double getQuantity() {
    return quantity;
  }


  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public TaxEstimationLineItemRequest unitPrice(Double unitPrice) {
    
    this.unitPrice = unitPrice;
    return this;
  }

   /**
   * The unit price for this line item. In case of [tiered pricing](https://www.chargebee.com/docs/1.0/plans.html#tiered-pricing) where the unit price varies for each quantity tier, this is the average unit price.
   * minimum: 0
   * @return unitPrice
  **/
  @javax.annotation.Nullable
  public Double getUnitPrice() {
    return unitPrice;
  }


  public void setUnitPrice(Double unitPrice) {
    this.unitPrice = unitPrice;
  }


  public TaxEstimationLineItemRequest amount(Double amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The amount for this line item. This is &#x60;unitPrice&#x60; × &#x60;quantity&#x60;.
   * @return amount
  **/
  @javax.annotation.Nonnull
  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public TaxEstimationLineItemRequest discountAmount(Double discountAmount) {
    
    this.discountAmount = discountAmount;
    return this;
  }

   /**
   * The discount applied to this line item.
   * @return discountAmount
  **/
  @javax.annotation.Nullable
  public Double getDiscountAmount() {
    return discountAmount;
  }


  public void setDiscountAmount(Double discountAmount) {
    this.discountAmount = discountAmount;
  }


  public TaxEstimationLineItemRequest isTaxInclusive(Boolean isTaxInclusive) {
    
    this.isTaxInclusive = isTaxInclusive;
    return this;
  }

   /**
   * Indicates whether (&#x60;amount&#x60; - &#x60;discountAmount&#x60;)  is inclusive of taxes.
   * @return isTaxInclusive
  **/
  @javax.annotation.Nonnull
  public Boolean getIsTaxInclusive() {
    return isTaxInclusive;
  }


  public void setIsTaxInclusive(Boolean isTaxInclusive) {
    this.isTaxInclusive = isTaxInclusive;
  }


  public TaxEstimationLineItemRequest taxIdentifiers(List<FieldItem> taxIdentifiers) {
    
    this.taxIdentifiers = taxIdentifiers;
    return this;
  }

  public TaxEstimationLineItemRequest addTaxIdentifiersItem(FieldItem taxIdentifiersItem) {
    if (this.taxIdentifiers == null) {
      this.taxIdentifiers = new ArrayList<>();
    }
    this.taxIdentifiers.add(taxIdentifiersItem);
    return this;
  }

   /**
   * The tax code fields of the product used for tax calculation.
   * @return taxIdentifiers
  **/
  @javax.annotation.Nullable
  public List<FieldItem> getTaxIdentifiers() {
    return taxIdentifiers;
  }


  public void setTaxIdentifiers(List<FieldItem> taxIdentifiers) {
    this.taxIdentifiers = taxIdentifiers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxEstimationLineItemRequest taxEstimationLineItemRequest = (TaxEstimationLineItemRequest) o;
    return Objects.equals(this.number, taxEstimationLineItemRequest.number) &&
        Objects.equals(this.itemCode, taxEstimationLineItemRequest.itemCode) &&
        Objects.equals(this.description, taxEstimationLineItemRequest.description) &&
        Objects.equals(this.quantity, taxEstimationLineItemRequest.quantity) &&
        Objects.equals(this.unitPrice, taxEstimationLineItemRequest.unitPrice) &&
        Objects.equals(this.amount, taxEstimationLineItemRequest.amount) &&
        Objects.equals(this.discountAmount, taxEstimationLineItemRequest.discountAmount) &&
        Objects.equals(this.isTaxInclusive, taxEstimationLineItemRequest.isTaxInclusive) &&
        Objects.equals(this.taxIdentifiers, taxEstimationLineItemRequest.taxIdentifiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(number, itemCode, description, quantity, unitPrice, amount, discountAmount, isTaxInclusive, taxIdentifiers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxEstimationLineItemRequest {\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    itemCode: ").append(toIndentedString(itemCode)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    isTaxInclusive: ").append(toIndentedString(isTaxInclusive)).append("\n");
    sb.append("    taxIdentifiers: ").append(toIndentedString(taxIdentifiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("number");
    openapiFields.add("itemCode");
    openapiFields.add("description");
    openapiFields.add("quantity");
    openapiFields.add("unitPrice");
    openapiFields.add("amount");
    openapiFields.add("discountAmount");
    openapiFields.add("isTaxInclusive");
    openapiFields.add("taxIdentifiers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("isTaxInclusive");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TaxEstimationLineItemRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaxEstimationLineItemRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxEstimationLineItemRequest is not found in the empty JSON string", TaxEstimationLineItemRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaxEstimationLineItemRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxEstimationLineItemRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TaxEstimationLineItemRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("itemCode") != null && !jsonObj.get("itemCode").isJsonNull()) && !jsonObj.get("itemCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemCode").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("taxIdentifiers") != null && !jsonObj.get("taxIdentifiers").isJsonNull()) {
        JsonArray jsonArraytaxIdentifiers = jsonObj.getAsJsonArray("taxIdentifiers");
        if (jsonArraytaxIdentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxIdentifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxIdentifiers` to be an array in the JSON string but got `%s`", jsonObj.get("taxIdentifiers").toString()));
          }

          // validate the optional field `taxIdentifiers` (array)
          for (int i = 0; i < jsonArraytaxIdentifiers.size(); i++) {
            FieldItem.validateJsonElement(jsonArraytaxIdentifiers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxEstimationLineItemRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxEstimationLineItemRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxEstimationLineItemRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxEstimationLineItemRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxEstimationLineItemRequest>() {
           @Override
           public void write(JsonWriter out, TaxEstimationLineItemRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxEstimationLineItemRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxEstimationLineItemRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxEstimationLineItemRequest
  * @throws IOException if the JSON string is invalid with respect to TaxEstimationLineItemRequest
  */
  public static TaxEstimationLineItemRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxEstimationLineItemRequest.class);
  }

 /**
  * Convert an instance of TaxEstimationLineItemRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

