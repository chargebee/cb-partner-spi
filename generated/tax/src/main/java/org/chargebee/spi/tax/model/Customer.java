/*
 * Taxes Service Adapter SPI
 * ## Overview Tax Service Adapter is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Address validation - Estimating taxes for sales - Submitting invoices for tax filing  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Tax Authority The institution, usually a government, that is responsible for collecting taxes for commercial transactions between Merchants and their Customers.   ### Tax Service Provider The service which provides tax estimation and tax filing services for merchants. ### Tax Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Tax Service Provider's API. - Translates API responses from the Tax Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Tax Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ```     `\"Authorization\":\"{\"<authorization_key>\":\"test_GykCvTykZFTBqHQAFzjMN9R1Thgdho0Q\"}\"` 
 *
 * The version of the OpenAPI document: 0.3.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.chargebee.spi.tax.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.chargebee.spi.tax.model.Address;
import org.chargebee.spi.tax.model.CustomerLocationEvidence;
import org.chargebee.spi.tax.model.FieldItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.chargebee.spi.tax.client.JSON;

/**
 * The details of the Customer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Customer {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CUSTOMER_CODE = "customerCode";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CODE)
  private String customerCode;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_TAX_REGISTRATION_NUMBER = "taxRegistrationNumber";
  @SerializedName(SERIALIZED_NAME_TAX_REGISTRATION_NUMBER)
  private String taxRegistrationNumber;

  public static final String SERIALIZED_NAME_TAX_IDENTIFIERS = "taxIdentifiers";
  @SerializedName(SERIALIZED_NAME_TAX_IDENTIFIERS)
  private List<FieldItem> taxIdentifiers;

  public static final String SERIALIZED_NAME_HAS_NEXUS = "hasNexus";
  @SerializedName(SERIALIZED_NAME_HAS_NEXUS)
  private Boolean hasNexus;

  public static final String SERIALIZED_NAME_LOCATION_EVIDENCE = "locationEvidence";
  @SerializedName(SERIALIZED_NAME_LOCATION_EVIDENCE)
  private CustomerLocationEvidence locationEvidence;

  public Customer() {
  }

  public Customer name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the Customer in Chargebee.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Customer customerCode(String customerCode) {
    
    this.customerCode = customerCode;
    return this;
  }

   /**
   * The unique identifier for the Customer in Chargebee.
   * @return customerCode
  **/
  @javax.annotation.Nonnull
  public String getCustomerCode() {
    return customerCode;
  }


  public void setCustomerCode(String customerCode) {
    this.customerCode = customerCode;
  }


  public Customer company(String company) {
    
    this.company = company;
    return this;
  }

   /**
   * The company name of the customer
   * @return company
  **/
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }


  public void setCompany(String company) {
    this.company = company;
  }


  public Customer address(Address address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nonnull
  public Address getAddress() {
    return address;
  }


  public void setAddress(Address address) {
    this.address = address;
  }


  public Customer taxRegistrationNumber(String taxRegistrationNumber) {
    
    this.taxRegistrationNumber = taxRegistrationNumber;
    return this;
  }

   /**
   * The tax registration number of a business in a country. For example, this is the GSTIN for India or the VAT number for EU or Australia.
   * @return taxRegistrationNumber
  **/
  @javax.annotation.Nullable
  public String getTaxRegistrationNumber() {
    return taxRegistrationNumber;
  }


  public void setTaxRegistrationNumber(String taxRegistrationNumber) {
    this.taxRegistrationNumber = taxRegistrationNumber;
  }


  public Customer taxIdentifiers(List<FieldItem> taxIdentifiers) {
    
    this.taxIdentifiers = taxIdentifiers;
    return this;
  }

  public Customer addTaxIdentifiersItem(FieldItem taxIdentifiersItem) {
    if (this.taxIdentifiers == null) {
      this.taxIdentifiers = new ArrayList<>();
    }
    this.taxIdentifiers.add(taxIdentifiersItem);
    return this;
  }

   /**
   * It represents the information related to the customer&#39;s tax identifiers. This includes details such as exemption status etc.
   * @return taxIdentifiers
  **/
  @javax.annotation.Nullable
  public List<FieldItem> getTaxIdentifiers() {
    return taxIdentifiers;
  }


  public void setTaxIdentifiers(List<FieldItem> taxIdentifiers) {
    this.taxIdentifiers = taxIdentifiers;
  }


  public Customer hasNexus(Boolean hasNexus) {
    
    this.hasNexus = hasNexus;
    return this;
  }

   /**
   * Determines whether a tax nexus exists between the Seller and the tax authority at the address provided.
   * @return hasNexus
  **/
  @javax.annotation.Nullable
  public Boolean getHasNexus() {
    return hasNexus;
  }


  public void setHasNexus(Boolean hasNexus) {
    this.hasNexus = hasNexus;
  }


  public Customer locationEvidence(CustomerLocationEvidence locationEvidence) {
    
    this.locationEvidence = locationEvidence;
    return this;
  }

   /**
   * Get locationEvidence
   * @return locationEvidence
  **/
  @javax.annotation.Nullable
  public CustomerLocationEvidence getLocationEvidence() {
    return locationEvidence;
  }


  public void setLocationEvidence(CustomerLocationEvidence locationEvidence) {
    this.locationEvidence = locationEvidence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Customer customer = (Customer) o;
    return Objects.equals(this.name, customer.name) &&
        Objects.equals(this.customerCode, customer.customerCode) &&
        Objects.equals(this.company, customer.company) &&
        Objects.equals(this.address, customer.address) &&
        Objects.equals(this.taxRegistrationNumber, customer.taxRegistrationNumber) &&
        Objects.equals(this.taxIdentifiers, customer.taxIdentifiers) &&
        Objects.equals(this.hasNexus, customer.hasNexus) &&
        Objects.equals(this.locationEvidence, customer.locationEvidence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, customerCode, company, address, taxRegistrationNumber, taxIdentifiers, hasNexus, locationEvidence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Customer {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    customerCode: ").append(toIndentedString(customerCode)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    taxRegistrationNumber: ").append(toIndentedString(taxRegistrationNumber)).append("\n");
    sb.append("    taxIdentifiers: ").append(toIndentedString(taxIdentifiers)).append("\n");
    sb.append("    hasNexus: ").append(toIndentedString(hasNexus)).append("\n");
    sb.append("    locationEvidence: ").append(toIndentedString(locationEvidence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("customerCode");
    openapiFields.add("company");
    openapiFields.add("address");
    openapiFields.add("taxRegistrationNumber");
    openapiFields.add("taxIdentifiers");
    openapiFields.add("hasNexus");
    openapiFields.add("locationEvidence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("customerCode");
    openapiRequiredFields.add("address");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Customer
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Customer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Customer is not found in the empty JSON string", Customer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Customer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Customer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Customer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("customerCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerCode").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      // validate the required field `address`
      Address.validateJsonElement(jsonObj.get("address"));
      if ((jsonObj.get("taxRegistrationNumber") != null && !jsonObj.get("taxRegistrationNumber").isJsonNull()) && !jsonObj.get("taxRegistrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxRegistrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxRegistrationNumber").toString()));
      }
      if (jsonObj.get("taxIdentifiers") != null && !jsonObj.get("taxIdentifiers").isJsonNull()) {
        JsonArray jsonArraytaxIdentifiers = jsonObj.getAsJsonArray("taxIdentifiers");
        if (jsonArraytaxIdentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxIdentifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxIdentifiers` to be an array in the JSON string but got `%s`", jsonObj.get("taxIdentifiers").toString()));
          }

          // validate the optional field `taxIdentifiers` (array)
          for (int i = 0; i < jsonArraytaxIdentifiers.size(); i++) {
            FieldItem.validateJsonElement(jsonArraytaxIdentifiers.get(i));
          };
        }
      }
      // validate the optional field `locationEvidence`
      if (jsonObj.get("locationEvidence") != null && !jsonObj.get("locationEvidence").isJsonNull()) {
        CustomerLocationEvidence.validateJsonElement(jsonObj.get("locationEvidence"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Customer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Customer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Customer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Customer.class));

       return (TypeAdapter<T>) new TypeAdapter<Customer>() {
           @Override
           public void write(JsonWriter out, Customer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Customer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Customer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Customer
  * @throws IOException if the JSON string is invalid with respect to Customer
  */
  public static Customer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Customer.class);
  }

 /**
  * Convert an instance of Customer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

