/*
 * Taxes Service Adapter SPI
 * ## Overview Tax Service Adapter is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Address validation - Estimating taxes for sales - Submitting invoices for tax filing  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Tax Authority The institution, usually a government, that is responsible for collecting taxes for commercial transactions between Merchants and their Customers.   ### Tax Service Provider The service which provides tax estimation and tax filing services for merchants. ### Tax Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Tax Service Provider's API. - Translates API responses from the Tax Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Tax Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ```     `\"Authorization\":\"{\"<authorization_key>\":\"test_GykCvTykZFTBqHQAFzjMN9R1Thgdho0Q\"}\"` 
 *
 * The version of the OpenAPI document: 0.3.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.chargebee.spi.tax.api;

import org.chargebee.spi.tax.client.ApiCallback;
import org.chargebee.spi.tax.client.ApiClient;
import org.chargebee.spi.tax.client.ApiException;
import org.chargebee.spi.tax.client.ApiResponse;
import org.chargebee.spi.tax.client.Configuration;
import org.chargebee.spi.tax.client.Pair;
import org.chargebee.spi.tax.client.ProgressRequestBody;
import org.chargebee.spi.tax.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.chargebee.spi.tax.model.BasicErrorResponse;
import org.chargebee.spi.tax.model.CreditNote;
import org.chargebee.spi.tax.model.CreditNoteRequest;
import org.chargebee.spi.tax.model.HealthCheckResponse;
import org.chargebee.spi.tax.model.ValidationErrorResponse;
import org.chargebee.spi.tax.model.VoidRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CreditNoteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CreditNoteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CreditNoteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for commitCreditNote
     * @param creditNoteId The unique identifier of the credit note at the Tax Service Adapter or Tax Service Provider. (required)
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (optional)
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Credit note committed successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitCreditNoteCall(String creditNoteId, String invoiceId, String merchantId, String traceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credit-notes/{creditNoteId}/commit"
            .replace("{" + "creditNoteId" + "}", localVarApiClient.escapeString(creditNoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (invoiceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceId", invoiceId));
        }

        if (merchantId != null) {
            localVarHeaderParams.put("merchant_id", localVarApiClient.parameterToString(merchantId));
        }

        if (traceId != null) {
            localVarHeaderParams.put("trace_id", localVarApiClient.parameterToString(traceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commitCreditNoteValidateBeforeCall(String creditNoteId, String invoiceId, String merchantId, String traceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditNoteId' is set
        if (creditNoteId == null) {
            throw new ApiException("Missing the required parameter 'creditNoteId' when calling commitCreditNote(Async)");
        }

        return commitCreditNoteCall(creditNoteId, invoiceId, merchantId, traceId, _callback);

    }

    /**
     * Commit credit note
     * This endpoint is used to mark a credit note as committed. Once committed, the credit note is considered as finalized.
     * @param creditNoteId The unique identifier of the credit note at the Tax Service Adapter or Tax Service Provider. (required)
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (optional)
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Credit note committed successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public void commitCreditNote(String creditNoteId, String invoiceId, String merchantId, String traceId) throws ApiException {
        commitCreditNoteWithHttpInfo(creditNoteId, invoiceId, merchantId, traceId);
    }

    /**
     * Commit credit note
     * This endpoint is used to mark a credit note as committed. Once committed, the credit note is considered as finalized.
     * @param creditNoteId The unique identifier of the credit note at the Tax Service Adapter or Tax Service Provider. (required)
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (optional)
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Credit note committed successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> commitCreditNoteWithHttpInfo(String creditNoteId, String invoiceId, String merchantId, String traceId) throws ApiException {
        okhttp3.Call localVarCall = commitCreditNoteValidateBeforeCall(creditNoteId, invoiceId, merchantId, traceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Commit credit note (asynchronously)
     * This endpoint is used to mark a credit note as committed. Once committed, the credit note is considered as finalized.
     * @param creditNoteId The unique identifier of the credit note at the Tax Service Adapter or Tax Service Provider. (required)
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (optional)
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Credit note committed successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitCreditNoteAsync(String creditNoteId, String invoiceId, String merchantId, String traceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = commitCreditNoteValidateBeforeCall(creditNoteId, invoiceId, merchantId, traceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCreditNote
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @param creditNoteRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Credit note created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreditNoteCall(String merchantId, String traceId, CreditNoteRequest creditNoteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditNoteRequest;

        // create path and map variables
        String localVarPath = "/credit-notes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (merchantId != null) {
            localVarHeaderParams.put("merchant_id", localVarApiClient.parameterToString(merchantId));
        }

        if (traceId != null) {
            localVarHeaderParams.put("trace_id", localVarApiClient.parameterToString(traceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCreditNoteValidateBeforeCall(String merchantId, String traceId, CreditNoteRequest creditNoteRequest, final ApiCallback _callback) throws ApiException {
        return createCreditNoteCall(merchantId, traceId, creditNoteRequest, _callback);

    }

    /**
     * Create credit note
     * This endpoint is used to send a credit note to the Tax Service Adapter. A credit note is used to reduce the amount due on an invoice. If the credit note is issued after payments have been made for the invoice, refunds can be issued to the Customer.
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @param creditNoteRequest  (optional)
     * @return CreditNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Credit note created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public CreditNote createCreditNote(String merchantId, String traceId, CreditNoteRequest creditNoteRequest) throws ApiException {
        ApiResponse<CreditNote> localVarResp = createCreditNoteWithHttpInfo(merchantId, traceId, creditNoteRequest);
        return localVarResp.getData();
    }

    /**
     * Create credit note
     * This endpoint is used to send a credit note to the Tax Service Adapter. A credit note is used to reduce the amount due on an invoice. If the credit note is issued after payments have been made for the invoice, refunds can be issued to the Customer.
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @param creditNoteRequest  (optional)
     * @return ApiResponse&lt;CreditNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Credit note created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditNote> createCreditNoteWithHttpInfo(String merchantId, String traceId, CreditNoteRequest creditNoteRequest) throws ApiException {
        okhttp3.Call localVarCall = createCreditNoteValidateBeforeCall(merchantId, traceId, creditNoteRequest, null);
        Type localVarReturnType = new TypeToken<CreditNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create credit note (asynchronously)
     * This endpoint is used to send a credit note to the Tax Service Adapter. A credit note is used to reduce the amount due on an invoice. If the credit note is issued after payments have been made for the invoice, refunds can be issued to the Customer.
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @param creditNoteRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Credit note created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCreditNoteAsync(String merchantId, String traceId, CreditNoteRequest creditNoteRequest, final ApiCallback<CreditNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCreditNoteValidateBeforeCall(merchantId, traceId, creditNoteRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCreditNote
     * @param creditNoteId The unique identifier of the credit note at the Tax Service Adapter or Tax Service Provider. (required)
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (optional)
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit note retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCreditNoteCall(String creditNoteId, String invoiceId, String merchantId, String traceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credit-notes/{creditNoteId}"
            .replace("{" + "creditNoteId" + "}", localVarApiClient.escapeString(creditNoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (invoiceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceId", invoiceId));
        }

        if (merchantId != null) {
            localVarHeaderParams.put("merchant_id", localVarApiClient.parameterToString(merchantId));
        }

        if (traceId != null) {
            localVarHeaderParams.put("trace_id", localVarApiClient.parameterToString(traceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCreditNoteValidateBeforeCall(String creditNoteId, String invoiceId, String merchantId, String traceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditNoteId' is set
        if (creditNoteId == null) {
            throw new ApiException("Missing the required parameter 'creditNoteId' when calling fetchCreditNote(Async)");
        }

        return fetchCreditNoteCall(creditNoteId, invoiceId, merchantId, traceId, _callback);

    }

    /**
     * Retrieve credit note
     * This endpoint is used to retrieve a specific credit note using the unique credit note id.
     * @param creditNoteId The unique identifier of the credit note at the Tax Service Adapter or Tax Service Provider. (required)
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (optional)
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @return CreditNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit note retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public CreditNote fetchCreditNote(String creditNoteId, String invoiceId, String merchantId, String traceId) throws ApiException {
        ApiResponse<CreditNote> localVarResp = fetchCreditNoteWithHttpInfo(creditNoteId, invoiceId, merchantId, traceId);
        return localVarResp.getData();
    }

    /**
     * Retrieve credit note
     * This endpoint is used to retrieve a specific credit note using the unique credit note id.
     * @param creditNoteId The unique identifier of the credit note at the Tax Service Adapter or Tax Service Provider. (required)
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (optional)
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @return ApiResponse&lt;CreditNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit note retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditNote> fetchCreditNoteWithHttpInfo(String creditNoteId, String invoiceId, String merchantId, String traceId) throws ApiException {
        okhttp3.Call localVarCall = fetchCreditNoteValidateBeforeCall(creditNoteId, invoiceId, merchantId, traceId, null);
        Type localVarReturnType = new TypeToken<CreditNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve credit note (asynchronously)
     * This endpoint is used to retrieve a specific credit note using the unique credit note id.
     * @param creditNoteId The unique identifier of the credit note at the Tax Service Adapter or Tax Service Provider. (required)
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (optional)
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Credit note retrieved successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCreditNoteAsync(String creditNoteId, String invoiceId, String merchantId, String traceId, final ApiCallback<CreditNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCreditNoteValidateBeforeCall(creditNoteId, invoiceId, merchantId, traceId, _callback);
        Type localVarReturnType = new TypeToken<CreditNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for voidCreditNote
     * @param creditNoteId The unique identifier of the credit note at the Tax Service Adapter or Tax Service Provider. (required)
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (optional)
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @param voidRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Credit note voided successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call voidCreditNoteCall(String creditNoteId, String invoiceId, String merchantId, String traceId, VoidRequest voidRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voidRequest;

        // create path and map variables
        String localVarPath = "/credit-notes/{creditNoteId}/void"
            .replace("{" + "creditNoteId" + "}", localVarApiClient.escapeString(creditNoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (invoiceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceId", invoiceId));
        }

        if (merchantId != null) {
            localVarHeaderParams.put("merchant_id", localVarApiClient.parameterToString(merchantId));
        }

        if (traceId != null) {
            localVarHeaderParams.put("trace_id", localVarApiClient.parameterToString(traceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call voidCreditNoteValidateBeforeCall(String creditNoteId, String invoiceId, String merchantId, String traceId, VoidRequest voidRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditNoteId' is set
        if (creditNoteId == null) {
            throw new ApiException("Missing the required parameter 'creditNoteId' when calling voidCreditNote(Async)");
        }

        return voidCreditNoteCall(creditNoteId, invoiceId, merchantId, traceId, voidRequest, _callback);

    }

    /**
     * Void credit note
     * This endpoint is used to void the credit note for a specific credit note id. Voiding reverses the credit note, thereby restoring the amount due on the invoice.
     * @param creditNoteId The unique identifier of the credit note at the Tax Service Adapter or Tax Service Provider. (required)
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (optional)
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @param voidRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Credit note voided successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public void voidCreditNote(String creditNoteId, String invoiceId, String merchantId, String traceId, VoidRequest voidRequest) throws ApiException {
        voidCreditNoteWithHttpInfo(creditNoteId, invoiceId, merchantId, traceId, voidRequest);
    }

    /**
     * Void credit note
     * This endpoint is used to void the credit note for a specific credit note id. Voiding reverses the credit note, thereby restoring the amount due on the invoice.
     * @param creditNoteId The unique identifier of the credit note at the Tax Service Adapter or Tax Service Provider. (required)
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (optional)
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @param voidRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Credit note voided successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> voidCreditNoteWithHttpInfo(String creditNoteId, String invoiceId, String merchantId, String traceId, VoidRequest voidRequest) throws ApiException {
        okhttp3.Call localVarCall = voidCreditNoteValidateBeforeCall(creditNoteId, invoiceId, merchantId, traceId, voidRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Void credit note (asynchronously)
     * This endpoint is used to void the credit note for a specific credit note id. Voiding reverses the credit note, thereby restoring the amount due on the invoice.
     * @param creditNoteId The unique identifier of the credit note at the Tax Service Adapter or Tax Service Provider. (required)
     * @param invoiceId The unique identifier of the invoice at the Tax Service Adapter or Tax Service Provider. (optional)
     * @param merchantId Merchant&#39;s domain name will be sent by Chargebee (optional)
     * @param traceId Unique id of the request will be sent by Chargebee (optional)
     * @param voidRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Credit note voided successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call voidCreditNoteAsync(String creditNoteId, String invoiceId, String merchantId, String traceId, VoidRequest voidRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = voidCreditNoteValidateBeforeCall(creditNoteId, invoiceId, merchantId, traceId, voidRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
