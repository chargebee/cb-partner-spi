/*
 * Taxes Service Adapter SPI
 * ## Overview Tax Service Adapter is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Address validation - Estimating taxes for sales - Submitting invoices for tax filing  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Tax Authority The institution, usually a government, that is responsible for collecting taxes for commercial transactions between Merchants and their Customers.   ### Tax Service Provider The service which provides tax estimation and tax filing services for merchants. ### Tax Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Tax Service Provider's API. - Translates API responses from the Tax Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Tax Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ```     `\"Authorization\":\"{\"<authorization_key>\":\"test_GykCvTykZFTBqHQAFzjMN9R1Thgdho0Q\"}\"` 
 *
 * The version of the OpenAPI document: 0.3.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.chargebee.spi.tax.api;

import org.chargebee.spi.tax.client.ApiException;
import org.chargebee.spi.tax.model.BasicErrorResponse;
import org.chargebee.spi.tax.model.CreditNote;
import org.chargebee.spi.tax.model.CreditNoteRequest;
import org.chargebee.spi.tax.model.HealthCheckResponse;
import org.chargebee.spi.tax.model.ValidationErrorResponse;
import org.chargebee.spi.tax.model.VoidRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CreditNoteApi
 */
@Disabled
public class CreditNoteApiTest {

    private final CreditNoteApi api = new CreditNoteApi();

    /**
     * Commit credit note
     *
     * This endpoint is used to mark a credit note as committed. Once committed, the credit note is considered as finalized.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commitCreditNoteTest() throws ApiException {
        String creditNoteId = null;
        String invoiceId = null;
        String merchantId = null;
        String traceId = null;
        api.commitCreditNote(creditNoteId, invoiceId, merchantId, traceId);
        // TODO: test validations
    }

    /**
     * Create credit note
     *
     * This endpoint is used to send a credit note to the Tax Service Adapter. A credit note is used to reduce the amount due on an invoice. If the credit note is issued after payments have been made for the invoice, refunds can be issued to the Customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCreditNoteTest() throws ApiException {
        String merchantId = null;
        String traceId = null;
        CreditNoteRequest creditNoteRequest = null;
        CreditNote response = api.createCreditNote(merchantId, traceId, creditNoteRequest);
        // TODO: test validations
    }

    /**
     * Retrieve credit note
     *
     * This endpoint is used to retrieve a specific credit note using the unique credit note id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchCreditNoteTest() throws ApiException {
        String creditNoteId = null;
        String invoiceId = null;
        String merchantId = null;
        String traceId = null;
        CreditNote response = api.fetchCreditNote(creditNoteId, invoiceId, merchantId, traceId);
        // TODO: test validations
    }

    /**
     * Void credit note
     *
     * This endpoint is used to void the credit note for a specific credit note id. Voiding reverses the credit note, thereby restoring the amount due on the invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void voidCreditNoteTest() throws ApiException {
        String creditNoteId = null;
        String invoiceId = null;
        String merchantId = null;
        String traceId = null;
        VoidRequest voidRequest = null;
        api.voidCreditNote(creditNoteId, invoiceId, merchantId, traceId, voidRequest);
        // TODO: test validations
    }

}
