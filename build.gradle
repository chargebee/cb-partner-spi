import groovy.json.JsonSlurper
import org.openapitools.generator.gradle.plugin.tasks.ValidateTask
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id "idea"
    id "java"
    id 'maven-publish'
    id 'signing'
    id "org.openapi.generator" version "7.0.1"
}

group build_group
version build_version

sourceSets {
    main.resources.srcDirs = ['spec/capabilities']
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = "17"
    targetCompatibility = "17"
}

def loadSpecConfig() {
    def configJson = "[" + file('spec.config').text + "]"
    def config = new JsonSlurper().parseText(configJson)
    project.ext.specConfig = config as ArrayList
}

tasks.register("generateSpec")

tasks.register("validateSpec")

def openApiTask() {
    loadSpecConfig()

    for (int i = 0; i < specConfig.size(); i++) {
        def spec = specConfig[i]
        def validateTaskName = "validateSpec_$spec.name"
        def generateTaskName = "generateSpec_$spec.name"

        tasks.register(validateTaskName, ValidateTask) {
            inputSpec.set("$rootDir/spec/spi/openapi_$spec.name"+".yml")
            recommend.set(true)
        }

        tasks.register(generateTaskName, GenerateTask) {
            generatorName.set("java")
            inputSpec.set("$rootDir/spec/spi/openapi_$spec.name"+".yml")
            outputDir.set("$rootDir/generated/$spec.name")
            apiPackage.set("org.chargebee.spi.$spec.name"+".api")
            invokerPackage.set("org.chargebee.spi.$spec.name"+".client")
            modelPackage.set("org.chargebee.spi.$spec.name"+".model")
            groupId.set(project.group)
            id.set(spec.projectName)
            version.set(project.version)
            configFile.set("$rootDir/spec/spi/config.yml")

            doLast {
                def generatedApiDir = "$rootDir/generated/$spec.name/api"
                def targetApiDir = "$rootDir/spec/spi/generated/$spec.name/api"
                copy {
                    from generatedApiDir
                    into targetApiDir
                    include '**/*.yaml'
                }
            }
        }

        validateSpec.dependsOn(validateTaskName)
        generateSpec.dependsOn(generateTaskName)

        java.sourceSets["main"].java.srcDir("$rootDir/generated/$spec.name/src/main/java")
    }
}

openApiTask()

tasks.openApiGenerate.configure {
    actions.clear()
    dependsOn(generateSpec)
}

tasks.openApiValidate.configure {
    actions.clear()
    dependsOn(validateSpec)
}

// Task to generate sources JAR (this will create a sources.jar for the source code)
task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

// Signing keys and credentials (these can be defined in `local.properties` or via environment variables)
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["maven_username"] = ''
ext["maven_password"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["maven_username"] = System.getenv('MAVEN_USERNAME')
    ext["maven_password"] = System.getenv('MAVEN_PASSWORD')
}

// Maven Publishing Configuration
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java  // Publish the compiled Java artifact

            // Include the sources JAR
            artifact sourcesJar

            pom {
                name.set("Mavenpublish")
                description.set("Publishing Jar to remote Maven repository")
                url.set("https://github.com/chargebee/cb-provider-spi") 

                licenses {
                    license {
                        name.set("MIT License")
                        url.set("https://opensource.org/licenses/MIT")
                    }
                }
                developers {
                    developer {
                        id.set("cb-ashokmor")
                        name.set("Ashokmor")
                        email.set("ashok.mor@chargebee.com")
                    }
                }
                scm {
                    connection.set("scm:git:github.com/chargebee/cb-provider-spi.git")
                    developerConnection.set("scm:git:ssh://github.com/chargebee/cb-provider-spi.git")
                    url.set("https://github.com/chargebee/cb-provider-spi")
                }
            }
        }
    }

    repositories {
        maven {
            name = "MavenCentral"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = project.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = project.findProperty("maven_username") ?: System.getenv("MAVEN_USERNAME")
                password = project.findProperty("maven_password") ?: System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}


signing {
    useGpgCmd()
    useGpgKey("SIGNING_KEY_ID", "SIGNING_PASSWORD")  // GPG key ID and passphrase
    sign publishing.publications.mavenJava
}


// As of now, we have to keep following dependencies to generate builds with generated sources
dependencies {
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation 'io.gsonfire:gson-fire:1.8.5'
    implementation 'javax.ws.rs:jsr311-api:1.1.1'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'jakarta.annotation:jakarta.annotation-api:1.3.5'
    testImplementation 'org.mockito:mockito-core:5.6.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}
