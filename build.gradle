import groovy.json.JsonSlurper
import org.openapitools.generator.gradle.plugin.tasks.ValidateTask
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.openapi.generator' version '7.0.1'
    id 'maven-publish'
    id 'idea'
}

group = build_group
version = build_version

sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot dependencies
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // OpenAPI dependencies
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'io.gsonfire:gson-fire:1.8.5'
    implementation 'javax.ws.rs:jsr311-api:1.1.1'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'jakarta.annotation:jakarta.annotation-api:1.3.5'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'

    // JSON Schema validation dependencies
    implementation 'com.github.erosb:everit-json-schema:1.14.2'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', '.']
        }
        resources {
            srcDirs = ['src/main/resources', 'spec/capabilities']
        }
    }
}

// Spring Boot configuration
bootJar {
    archiveBaseName = 'spring-boot-openapi-jsonschema'
    archiveVersion = '1.0'
}

// JSON Schema Validator JAR configuration
task jsonSchemaValidatorJar(type: Jar) {
    archiveBaseName = 'json-schema-validator'
    archiveVersion = '1.0'
    manifest {
        attributes 'Main-Class': 'JsonSchemaValidator'
    }
    from(sourceSets.main.output) {
        include 'JsonSchemaValidator.class'
        include 'spec/capabilities/**'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task buildJsonSchemaValidator {
    dependsOn jsonSchemaValidatorJar
}

// OpenAPI Spec generation configuration



def loadSpecConfig() {
    def configFile = file('spec.config')
    if (!configFile.exists()) {
        println "spec.config file not found"
        return []
    }
    def configJson = configFile.text
    try {
        def parsed = new groovy.json.JsonSlurper().parseText(configJson)
        if (parsed instanceof List) {
            return new ArrayList(parsed)
        } else {
            println "Warning: Parsed JSON is not a List. Wrapping in a new List."
            return [parsed]
        }
    } catch (Exception e) {
        println "Error parsing spec.config: ${e.message}"
        return []
    }
}

tasks.register("generateSpec")
tasks.register("validateSpec")

def openApiTask() {
    def specConfig = loadSpecConfig()
    specConfig.each { spec ->
        def validateTaskName = "validateSpec_${spec.name}"
        def generateTaskName = "generateSpec_${spec.name}"

        tasks.register(validateTaskName, org.openapitools.generator.gradle.plugin.tasks.ValidateTask) {
            inputSpec.set("$rootDir/spec/spi/openapi_${spec.name}.yml")
            recommend.set(true)
        }

        tasks.register(generateTaskName, org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
            generatorName.set("spring")
            inputSpec.set("$rootDir/spec/spi/openapi_${spec.name}.yml")
            outputDir.set("$rootDir/generated/${spec.name}")
            apiPackage.set("org.chargebee.spi.${spec.name}.api")
            invokerPackage.set("org.chargebee.spi.${spec.name}.client")
            modelPackage.set("org.chargebee.spi.${spec.name}.model")
            groupId.set(project.group)
            id.set(spec.projectName)
            version.set(project.version)
            configFile.set("$rootDir/spec/spi/config.yml")
        }

        validateSpec.dependsOn(validateTaskName)
        generateSpec.dependsOn(generateTaskName)

        sourceSets.main.java.srcDir("$rootDir/generated/${spec.name}/src/main/java")
    }
}

gradle.projectsEvaluated {
    openApiTask()
}

tasks.openApiGenerate.configure {
    actions.clear()
    dependsOn(generateSpec)
}

tasks.openApiValidate.configure {
    actions.clear()
    dependsOn(validateSpec)
}

// Publishing configuration
publishing {
    repositories {
        maven {
            url = artifactory_publish_url
            credentials {
                username = System.env.CODEARTIFACT_USER
                password = System.env.CODEARTIFACT_AUTH_TOKEN
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

// Test configuration
test {
    useJUnitPlatform()
}